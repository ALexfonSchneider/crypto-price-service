// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/coins": {
            "get": {
                "description": "Returns a list of all coins currently in the watchlist with their details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coins"
                ],
                "summary": "Get list of watched coins",
                "responses": {
                    "200": {
                        "description": "List of coins in the watchlist",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_handlers_coin_watchlist.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new coin to the watchlist and returns the created coin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coins"
                ],
                "summary": "Add a coin to the watchlist",
                "parameters": [
                    {
                        "description": "Add coin request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_handlers_coin_addCoin.Request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created coin object",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_handlers_coin_addCoin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/coins/{symbol}": {
            "delete": {
                "description": "Removes a coin from the watchlist by its symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coins"
                ],
                "summary": "Remove coin from watchlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coin symbol (e.g. BTC, ETH)",
                        "name": "symbol",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Coin removed successfully (no content)"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/coins/{symbol}/price/closest": {
            "get": {
                "description": "Returns the price record closest to the specified timestamp for a given coin symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Get the closest price for a coin at a given timestamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coin symbol (e.g. BTC, ETH)",
                        "name": "symbol",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Timestamp in milliseconds",
                        "name": "timestamp",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_handlers_prices_closestToTimestamp.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid timestamp or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Coin not found or no price data exists",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/coins/{symbol}/prices": {
            "get": {
                "description": "Returns all recorded prices for the given coin symbol",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prices"
                ],
                "summary": "Get all prices for a coin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coin symbol (e.g. BTC, ETH)",
                        "name": "symbol",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_handlers_prices_AllForCoin.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Coin does not exist",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "crypto-price-service_internal_delivery_http_dto.ErrorBody": {
            "type": "object",
            "properties": {
                "cause": {
                    "type": "string"
                },
                "code": {
                    "type": "integer"
                },
                "detail": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "crypto-price-service_internal_delivery_http_dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/crypto-price-service_internal_delivery_http_dto.ErrorBody"
                }
            }
        },
        "internal_delivery_http_handlers_coin_addCoin.Request": {
            "type": "object",
            "required": [
                "name",
                "symbol"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "internal_delivery_http_handlers_coin_addCoin.SuccessResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "internal_delivery_http_handlers_coin_watchlist.Coin": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "internal_delivery_http_handlers_coin_watchlist.SuccessResponse": {
            "type": "object",
            "properties": {
                "coins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_delivery_http_handlers_coin_watchlist.Coin"
                    }
                }
            }
        },
        "internal_delivery_http_handlers_prices_AllForCoin.CoinPrice": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "internal_delivery_http_handlers_prices_AllForCoin.SuccessResponse": {
            "type": "object",
            "properties": {
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_delivery_http_handlers_prices_AllForCoin.CoinPrice"
                    }
                }
            }
        },
        "internal_delivery_http_handlers_prices_closestToTimestamp.SuccessResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "symbol": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Crypto Price API",
	Description:      "API for watching crypto prices",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
