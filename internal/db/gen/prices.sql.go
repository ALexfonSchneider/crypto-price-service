// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: prices.sql

package db

import (
	"context"
	"time"
)

const createPrice = `-- name: CreatePrice :exec
INSERT INTO prices (coin_id, price, created_at)
VALUES ($1, $2, $3)
`

type CreatePriceParams struct {
	CoinID    string    `json:"coin_id"`
	Price     float64   `json:"price"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) error {
	_, err := q.db.Exec(ctx, createPrice, arg.CoinID, arg.Price, arg.CreatedAt)
	return err
}

type CreatePricesParams struct {
	CoinID    string    `json:"coin_id"`
	Price     float64   `json:"price"`
	CreatedAt time.Time `json:"created_at"`
}

const getAllPricesForCoinByCoinID = `-- name: GetAllPricesForCoinByCoinID :many
SELECT id, coin_id, price, created_at
FROM prices
WHERE coin_id = $1
ORDER BY created_at desc
`

func (q *Queries) GetAllPricesForCoinByCoinID(ctx context.Context, coinID string) ([]Prices, error) {
	rows, err := q.db.Query(ctx, getAllPricesForCoinByCoinID, coinID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prices
	for rows.Next() {
		var i Prices
		if err := rows.Scan(
			&i.ID,
			&i.CoinID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClosestPriceByCoinID = `-- name: GetClosestPriceByCoinID :one
SELECT id, coin_id, price, created_at
FROM prices
WHERE coin_id = $1
ORDER BY ABS(EXTRACT(EPOCH FROM (created_at - $2::timestamptz)))
LIMIT 1
`

type GetClosestPriceByCoinIDParams struct {
	CoinID    string    `json:"coin_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetClosestPriceByCoinID(ctx context.Context, arg GetClosestPriceByCoinIDParams) (Prices, error) {
	row := q.db.QueryRow(ctx, getClosestPriceByCoinID, arg.CoinID, arg.CreatedAt)
	var i Prices
	err := row.Scan(
		&i.ID,
		&i.CoinID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
