// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: coins.sql

package db

import (
	"context"
	"time"
)

const activateCoin = `-- name: ActivateCoin :exec
UPDATE coins
SET is_active = true
WHERE id = $1
`

func (q *Queries) ActivateCoin(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, activateCoin, id)
	return err
}

const createCoin = `-- name: CreateCoin :exec
INSERT INTO coins (id, name, symbol, is_active, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCoinParams struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Symbol    string    `json:"symbol"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateCoin(ctx context.Context, arg CreateCoinParams) error {
	_, err := q.db.Exec(ctx, createCoin,
		arg.ID,
		arg.Name,
		arg.Symbol,
		arg.IsActive,
		arg.CreatedAt,
	)
	return err
}

const deactivateCoin = `-- name: DeactivateCoin :exec
UPDATE coins
SET is_active = false
WHERE id = $1
`

func (q *Queries) DeactivateCoin(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deactivateCoin, id)
	return err
}

const getCoin = `-- name: GetCoin :one
SELECT id, name, symbol, is_active, created_at
FROM coins
WHERE id = $1
`

func (q *Queries) GetCoin(ctx context.Context, id string) (Coins, error) {
	row := q.db.QueryRow(ctx, getCoin, id)
	var i Coins
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getCoinBySymbol = `-- name: GetCoinBySymbol :one
SELECT id, name, symbol, is_active, created_at
FROM coins
WHERE symbol = $1
`

func (q *Queries) GetCoinBySymbol(ctx context.Context, symbol string) (Coins, error) {
	row := q.db.QueryRow(ctx, getCoinBySymbol, symbol)
	var i Coins
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getCoinsBySymbols = `-- name: GetCoinsBySymbols :many
SELECT id, name, symbol, is_active, created_at
FROM coins
WHERE symbol = ANY($1::TEXT[])
`

func (q *Queries) GetCoinsBySymbols(ctx context.Context, symbols []string) ([]Coins, error) {
	rows, err := q.db.Query(ctx, getCoinsBySymbols, symbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coins
	for rows.Next() {
		var i Coins
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Symbol,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveCoins = `-- name: ListActiveCoins :many
SELECT id, name, symbol, is_active, created_at
FROM coins
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListActiveCoins(ctx context.Context) ([]Coins, error) {
	rows, err := q.db.Query(ctx, listActiveCoins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coins
	for rows.Next() {
		var i Coins
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Symbol,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
